范围：
int Search( int a[],int n,int begin,int end){
    int i,count=0;
    for(i=0;i<n;i++){
        if(a[i]>=begin&&a[i]<=end){
            count++;
            printf("%d-%d:%d\n",begin,end,a[i]);
        }
    }return count;



}

平均值：
float Average(int a[],int n){
    float sum=0,ave=0;
    int i;
    for(i=0;i<n;i++){
        sum=sum+a[i];
    }
    ave=sum/n;
    return ave;



}

最大：
int MAX(int a[],int n){
    int max,i;
    max=a[0];
    for(i=1;i<n;i++){
        if(max<a[i]){
            max=a[i];
            j=i;
        }
    }
    return max;

}

输入：
void Read(int a[],int n){
    int i;
    for(i=0;i<n;i++){
            printf("a[%d]=",i);
        scanf("%d",&a[i]);
    }

}

查找：
int Find(int a[],int n,int m){
    int i;
    for(i=0;i<n;i++){
        if(a[i]==m)return i;
    }
    return -1;

}
输入：
int Read(int a[],int n){
    int i;
    for(i=0; ;i++)
        {
           printf("Input score:");
        scanf("%d",&a[i]);

    if(a[i]<0){
        break;
    }
    n++;

    }

  return n;

}
排序：
void Sorted(int a[],int n){
    int i,j,k;
    for(i=0;i<n-1;i++){
        for(j=i+1;j<n;j++){
            if(a[j]>a[i]){
                k=a[j];
                a[j]=a[i];
                a[i]=k;
            }
        }
    }
倒序：
void Pa(int a[],int n){
    int i,j,temp;
    for(i=0,j=n-1;i<5;i++,j--){
        temp=a[j];
        a[j]=a[i];
        a[i]=temp;
    }


}
输出：
void Printf(int a[],int n){
    int i;
    for(i=0;i<n;i++){
        printf("%5d",a[i]);
    }


}
阶乘：
unsigned long  Fact(unsigned int  n){
    if(n==1||n==0){
        return 1;
    }
    else{
        return n*Fact(n-1);
    }


}
在数的个十百千位中寻找一样的：
int CountDigit(int number,int digit){
    int i,b,n=0;
    for(i=i; ;i++){
        b=number%10;
        number=number/10;
        if(b==digit){
            n++;
        }
        if(number<10){
            if(number==digit){
                n++;
            }
            else{
                break;
            }
        }
    }
    return n;


}
最大公约数：
int Gcd(int a,int b){
    int i;
    if(a<0||b<0)return -1;
    if(a>b){
        i=b;
    }
    else if(a<b){
        i=a;
        }
    else if(a==b){
        i=a;
    }
    for( ;;i--){
        if(a%i==0&&b%i==0){
            return i;
        }
    }


}
排序（从小到大）：
void Read(int score[])
{
    int i,j,temp;

    for(i=0;i<n-1; i++)
    {
        for(j=i+1;j<n;j++){
            if(score[j]<score[i]){
                temp=score[j];
                score[j]=score[i];
                score[i]=temp;
            }
        }

    }
}
二分法查找：
int Find(int num[],int x,int n)
{
    int l=0,h=n-1,m;
    while(l<=h)
    {
        m=l+(h-l)/2;
        if(x>num[m])
        {
            l=m+1;
        }
        else if(x<num[m])
        {
            h=m-1;
        }
        else
        {
            return m;
        }

    }
    return -1;

}
矩阵相乘：
void Mt(int A[m][s],int B[s][n],int C[m][n]){
	int i,j,k;
	for(i=0;i<m;i++){
	for(j=0;j<n;j++){
	C[i][j]=0;}
	}
	for(i=0;i<m;i++){
	for(j=0;j<n;j++){
	for(k=0;k<s;k++){
	Ci][j]=C[i][j]+A[i][k]*B[k][j];
	}
	}
	}
	}
//对角线计算函数
int AddDiagonal(int a[N][N], int n){
    /*a[0][0]+a[0][3]
    a[1][1]+a[1][2]
    a[2][2]+a[2][1]
    a[3][3]+a[3][0]*/
    int i,j,sum=0;
    for(i=0,j=n-1;i<n,j>=0;i++,j--){
            if(a[i][i]==a[i][j]){
                sum=sum+a[i][i];
            }
            else {
                    sum=sum+a[i][i]+a[i][j];}

    }
    return sum;

}
/*  函数功能： 计算n×n矩阵中两条对角线上的元素之和 */
int AddDiagonal(int a[N][N], int n)
{  	   	 	   	  
    int i, j, sum = 0; //1
    for (i = 0; i < n; i++) //1
    { 
        for (j = 0; j < n; j++) //1
        {  	   	 	   	  
            if (i == j || i + j == n - 1) //1
                sum = sum + a[i][j];
        }
    }
    return sum;
} 
#include <stdio.h>
#include <string.h>
#define N 80
void Inverse(char str[],char n);
//在字符串中寻找一个键盘输入的并且将它删除
int main()
{
    char str1[N],n;
    printf("Input a string:");
   scanf("%s",str1);
    printf("Input a character:");
    scanf(" %c",&n);
    Inverse(str1,n);
    printf("Results:%s\n",str1);

    return 0;
}
void Inverse(char str[],char n){
    int i,j,temp;
    for(i=0;i<strlen(str);i++){
        if(str[i]==n){
            for(j=i;j<strlen(str);j++){
                str[j]=str[j+1];
            }
        }
    }


}
#include <stdio.h>
#include <string.h>
#define N 80
void Inverse(char str1[],char str2[]);
//输入一个字符串，将其逆序输出。
int main()
{
    char str1[N],str2[N];
    printf("Please Enter String1:\n");
   gets(str1);
   Inverse(str1,str2);
  printf("Result is:\n%s\n",str2);

    return 0;
}
void Inverse(char str1[],char str2[]){
    int i,j;
    for(i=0,j=strlen(str1);i<strlen(str1);i++,j--){
            str2[i]=str1[j-1];


    }
    str2[strlen(str1)]='\0';


}
/* 函数功能：输出矩阵a中的元素 */
void  PrintMatrix(int a[ROW][ROW], int m)//1
{
    int i , j ;
    for (i = 0; i < m; i++)
    {
        for (j = 0; j < m; j++)
        {
            printf("%6d", a[i][j]);
        }
        printf("\n");
    }
}
/* 函数功能：计算矩阵相乘之积，结果存于二维数组c中 */
void MultiplyMatrix(int a[ROW][COL], int b[COL][ROW], int c[ROW][ROW], int m, int n)//1
{
    int i, j, k;
    for (i = 0; i < m; i++)//1
    {
        for (j = 0; j < m; j++)//1
        {
            c[i][j] = 0;//1
            for (k = 0; k < n; k++)//1
            {
                c[i][j] = c[i][j] + a[i][k] * b[k][j];//1
            }
        }
    }
}
